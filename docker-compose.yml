version: '3.8'

services:
  mysql:
    image: mysql:8.0
    container_name: db
    restart: always
    ports:
      - "3307:3306"
    environment:
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
    volumes:
      - mysqldata:/var/lib/mysql
      - ./schema.sql:/docker-entrypoint-initdb.d/schema.sql
    networks:
      - app-network

  ############## Eureka Server ###############
  eureka:
    build: com.sparta.logistics.eureka
    container_name: sparta.logistics.eureka
    ports:
      - "19090:19090"
    depends_on:
      - mysql
    networks:
      - app-network
  
  ############## Gateway Service ###############
  gateway:
    build: com.sparta.logistics.gateway
    container_name: sparta.logistics.gateway
    ports:
      - "19091:19091"
    depends_on:
      - mysql
      - eureka
    environment:
      WT_SECRET_KEY : ${JWT_SECRET_KEY}
    networks:
      - app-network
  
  ############## Auth Service ###############
  auth:
    build: com.sparta.logistics.auth
    container_name: sparta.logistics.auth
    ports:
      - "19092:19092"
    depends_on:
      - mysql
      - eureka
      - gateway
    environment:
      DB_USERNAME: ${DB_USERNAME}
      DB_PASSWORD: ${DB_PASSWORD}
      JWT_ACCESS_EXPIRATION: ${JWT_ACCESS_EXPIRATION}
      JWT_SECRET_KEY: ${JWT_SECRET_KEY}
    networks:
      - app-network
  
  ############## Order Service ###############
  order:
    build: com.sparta.logistics.order
    container_name: sparta.logistics.order
    ports:
      - "19010:19010"
    depends_on:
      - mysql
      - eureka
      - gateway
    environment:
      DB_USERNAME: ${DB_USERNAME}
      DB_PASSWORD: ${DB_PASSWORD}
    networks:
      - app-network

  ############## Product Service ###############
  product:
    build: com.sparta.logistics.product
    container_name: sparta.logistics.product
    ports:
      - "19020:19020"
    depends_on:
      - mysql
      - eureka
      - gateway
    environment:
      DB_USERNAME: ${DB_USERNAME}
      DB_PASSWORD: ${DB_PASSWORD}
      REDIS_USERNAME: ${REDIS_USERNAME}
      REDIS_PASSWORD: ${REDIS_PASSWORD}
    networks:
      - app-network

  ############## HubCompany Service ###############
  hubCompany:
    build: com.sparta.logistics.hub-company
    container_name: sparta.logistics.hub-company
    ports:
      - "19030:19030"
    depends_on:
      - mysql
      - eureka
      - gateway
    environment:
      DB_USERNAME: ${DB_USERNAME}
      DB_PASSWORD: ${DB_PASSWORD}
    networks:
      - app-network

  ############## HubRoute Service ###############
  hubRoute:
    build: com.sparta.logistics.hubroute
    container_name: sparta.logistics.hubroute
    ports:
      - "19040:19040"
    depends_on:
      - mysql
      - eureka
      - gateway
    environment:
      DB_USERNAME: ${DB_USERNAME}
      DB_PASSWORD: ${DB_PASSWORD}
      API_KEY: ${API_KEY}
    networks:
      - app-network

  ############## Delivery Service ###############
  delivery:
    build: com.sparta.logistics.delivery
    container_name: sparta.logistics.delivery
    ports:
      - "19050:19050"
    depends_on:
      - mysql
      - eureka
      - gateway
    environment:
      DB_USERNAME: ${DB_USERNAME}
      DB_PASSWORD: ${DB_PASSWORD}
      REDIS_USERNAME: ${REDIS_USERNAME}
      REDIS_PASSWORD: ${REDIS_PASSWORD}
      RABBITMQ_USERNAME: ${RABBITMQ_USERNAME}
      RABBITMQ_PASSWORD: ${RABBITMQ_PASSWORD}
    networks:
      - app-network

  ############## Infra Service ###############
  infra:
    build: com.sparta.logistics.infra
    container_name: sparta.logistics.infra
    ports:
      - "19060:19060"
    depends_on:
      - mysql
      - eureka
      - gateway
    environment:
      DB_USERNAME: ${DB_USERNAME}
      DB_PASSWORD: ${DB_PASSWORD}
      SLACK_TOKEN: ${SLACK_TOKEN}
      AI_API_KEY: ${AI_API_KEY}
    networks:
      - app-network

  ############## Redis ###############
  redis:
    image: redis/redis-stack
    container_name: redis-stack-compose
    restart: always
    environment:
      REDIS_ARGS: "--requirepass systempass"
    ports:
      - "6379:6379"
      - "8001:8001"

  ############## RabbitMQ ###############
  rabbitmq:
    image: rabbitmq:management
    container_name: rabbitmq
    restart: unless-stopped
    ports:
      - "5672:5672"

  ############## Kafka ###############
  zookeeper:
    image: wurstmeister/zookeeper:3.4.6
    platform: linux/amd64
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  kafka:
    image: wurstmeister/kafka:latest
    platform: linux/amd64
    ports:
      - "9092:9092"
    environment:
      KAFKA_ADVERTISED_LISTENERS: INSIDE://kafka:29092,OUTSIDE://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INSIDE:PLAINTEXT,OUTSIDE:PLAINTEXT
      KAFKA_LISTENERS: INSIDE://0.0.0.0:29092,OUTSIDE://0.0.0.0:9092
      KAFKA_INTER_BROKER_LISTENER_NAME: INSIDE
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    platform: linux/amd64
    ports:
      - "8080:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:29092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
      KAFKA_CLUSTERS_0_READONLY: "false"

volumes:
  mysqldata: 

networks:
  app-network:
    driver: bridge